(()=>{"use strict";const e="kwang-shopping";AWS.config.update({region:"ap-northeast-2",credentials:new AWS.CognitoIdentityCredentials({IdentityPoolId:"ap-northeast-2:b6a1fa02-993d-437d-9ed5-7134db218241"})});const t=new AWS.S3({apiVersion:"2006-03-01",params:{Bucket:e}});const n=e=>e.toString().replace(/\B(?=(\d{3})+(?!\d))/g,","),c=e=>function(){window.location.href=e},o=e=>parseInt(e.replace(/(,|개|원)/g,"")),r=e=>{const t=e.split(" "),n=document.querySelector("#navbar"),c=!!localStorage.getItem("token"),o=!!localStorage.getItem("admin"),r={register:'<li><a href="/register">회원가입</a></li>',login:'<li><a href="/login">로그인</a></li>'},a={account:'<li><a href="/account">계정관리</a></li>',logout:'<li><a href="#" id="logout">로그아웃</a></li>',productAdd:'<li><a href="/product/add">제품 추가</a></li>',categoryAdd:'<li><a href="/category/add">카테고리 추가</a></li>'},i={admin:'<li><a href="/admin">페이지관리</a></li>'},s=document.createElement("script");s.innerText="\n      const logoutElem = document.querySelector('#logout'); \n      \n      if (logoutElem) {\n        logoutElem.addEventListener('click', () => {\n          localStorage.removeItem('token');\n          localStorage.removeItem('admin');\n\n          window.location.href = '/';\n        });\n      }\n  ";let d="";for(const e of t)o&&(d+=i[e]??""),d+=c?a[e]??"":r[e]??"";n.insertAdjacentHTML("afterbegin",d),n.after(s)};let a;const i=()=>{const e=new Promise(((e,t)=>{const n=indexedDB.open("shopping",1);n.onupgradeneeded=()=>{console.log("indexeddb의 업그레이드가 이루어집니다.");const e=n.result;e.createObjectStore("cart",{autoIncrement:!0}),e.createObjectStore("order",{autoIncrement:!0})},n.onsuccess=async()=>{console.log("indexeddb가 정상적으로 시작되었습니다."),e(n.result)},n.onerror=()=>{const e=n.error;console.log(`indexeddb를 시작하는 과정에서 오류가 발생하였습니다: ${e}`),t(e)}}));return e},s=async(e,t="")=>{a||(a=await i());const n=a.transaction([e]).objectStore(e);return new Promise(((c,o)=>{const r=t?n.get(t):n.getAll();r.onsuccess=()=>{c(r.result)},r.onerror=()=>{const t=r.error;console.log(`${e}에서 가져오는 과정에서 오류가 발생하였습니다: ${t}`),o(t)}}))},d=async(e,t,n)=>{a||(a=await i());const c=a.transaction([e],"readwrite").objectStore(e);return new Promise(((o,r)=>{const a=c.get(t);a.onsuccess=()=>{const i=a.result||{};n(i);const s=c.put(i,t);s.onsuccess=()=>{console.log(`${e}가 정상적으로 수정되었습니다.`),o()},s.onerror=()=>{const t=s.error;console.log(`${e}를 수정하는데 에러가 발생하였습니다: ${t} `),r(t)}}}))},u=document.querySelector("#cartProductsContainer"),l=document.querySelector("#allSelectCheckbox"),m=document.querySelector("#partialDeleteLabel"),p=document.querySelector("#productsCount"),y=document.querySelector("#productsTotal"),g=document.querySelector("#deliveryFee"),b=document.querySelector("#orderTotal"),$=document.querySelector("#purchaseButton");async function f(e){const t=e.target.checked,{ids:n}=await s("order","summary");n.forEach((async e=>{const n=document.querySelector(`#checkbox-${e}`),c=n.checked;n.checked=t;const o=!t&&c;t&&!c&&(v(e,"add-checkbox"),h(e,"able")),o&&(v(e,"removeTemp-checkbox"),h(e,"disable"))}))}function h(e,t){const n=t.includes("plus"),c=t.includes("minus"),o=(t.includes("input"),t.includes("disable")),r=document.querySelector(`#minus-${e}`),a=document.querySelector(`#quantityInput-${e}`),i=document.querySelector(`#plus-${e}`);if(r.removeAttribute("disabled"),a.removeAttribute("disabled"),i.removeAttribute("disabled"),o)return r.setAttribute("disabled",""),a.setAttribute("disabled",""),void i.setAttribute("disabled","");let s;s=n?1:c?-1:0;const d=parseInt(a.value)+s;a.value=d;const u=99===d;1===d&&r.setAttribute("disabled",""),u&&i.setAttribute("disabled","")}async function q(){const{selectedIds:e}=await s("order","summary");e.forEach((e=>S(e)))}async function x(){const{ids:e,selectedIds:t}=await s("order","summary"),n=0===e.length,c=e.length===t.length;l.checked=!(n||!c)}async function S(e){await(async(e,t="")=>{a||(a=await i());const n=a.transaction([e],"readwrite").objectStore(e);return new Promise(((c,o)=>{const r=t?n.delete(t):n.clear();r.onsuccess=()=>{console.log(`${e}에서 정상적으로 삭제되었습니다.`),c()},r.onerror=()=>{const t=r.error;console.log(`${e}에서 삭제하는데 에러가 발생하였습니다: ${t} `),o(t)}}))})("cart",e),await v(e,"removePermanent-deleteButton"),document.querySelector(`#productItem-${e}`).remove(),x()}async function v(e,t){const c=t.includes("checkbox"),r=t.includes("input"),a=t.includes("deleteButton"),i=t.includes("minusButton"),s=t.includes("plusButton"),u=t.includes("add"),l=t.includes("removeTemp"),m=t.includes("removePermanent"),$=l||m,f=document.querySelector(`#checkbox-${e}`).checked,h=a&&!f;let q,S;if(c||a){const t=document.querySelector(`#total-${e}`);q=o(t.innerText),S=1}if(i||s){const t=document.querySelector(`#unitPrice-${e}`);q=o(t.innerText),S=0}if(r){const t=document.querySelector(`#unitPrice-${e}`),n=o(t.innerText),c=document.querySelector(`#quantityInput-${e}`),r=o(c.value),a=document.querySelector(`#quantity-${e}`);q=n*(r-o(a.innerText)),S=0}const v=u?+q:-q,w=u?+S:-S,k=o(p.innerText),T=o(y.innerText),I=o(g.innerText),E=o(b.innerText);h||(p.innerText=`${k+w}개`,y.innerText=`${n(T+v)}원`);const A=u&&0===I;A&&(g.innerText="3000원",b.innerText=`${n(E+v+3e3)}원`),A||h||(b.innerText=`${n(E+v)}원`);if(!h&&(1===k&&$)){g.innerText="0원";const e=o(b.innerText);b.innerText=`${n(e-3e3)}원`,x()}await d("order","summary",(t=>{const n=t.selectedIds.includes(e);u&&!n&&t.selectedIds.push(e),l&&(t.selectedIds=t.selectedIds.filter((t=>t!==e))),m&&(t.ids=t.ids.filter((t=>t!==e)),t.selectedIds=t.selectedIds.filter((t=>t!==e))),h||(t.productsCount+=w,t.productsTotal+=v)})),x()}async function w(e,t){const c=t.includes("input"),r=t.includes("increase"),a=document.querySelector(`#unitPrice-${e}`),i=o(a.innerText),s=document.querySelector(`#quantity-${e}`),d=o(s.innerText),u=document.querySelector(`#total-${e}`),l=o(u.innerText),m=document.querySelector(`#quantityInput-${e}`),p=o(m.value);if(c)return s.innerText=`${p}개`,void(u.innerText=`${n(i*p)}원`);const y=r?1:-1,g=r?+i:-i;s.innerText=`${d+y}개`,u.innerText=`${n(l+g)}원`}(()=>{switch(window.location.pathname){case"/":case"/cart/":case"/product/detail/":case"/product/list/":r("admin register login account logout");break;case"/account/orders/":case"/account/security/":case"/account/signout/":case"/admin/orders/":case"/admin/users/":case"/order/complete/":case"/order/":case"/product/add/":r("admin account logout");break;case"/account/":r("admin logout");break;case"/admin/":r("account logout");break;case"/category/add/":r("admin account productAdd logout");break;case"/login/":r("register");break;case"/register/":r("login")}})(),async function(){const o=await s("cart"),{selectedIds:r}=await s("order","summary");o.forEach((async o=>{const{_id:a,title:i,quantity:s,imageKey:l,price:m}=o,p=await function(n){return new Promise((c=>{const o={Bucket:e,Key:n,Expires:60};t.getSignedUrl("getObject",o,((e,t)=>{c(t)}))}))}(l),y=r.includes(a);var g;u.insertAdjacentHTML("beforeend",`\n        <div class="cart-product-item" id="productItem-${a}">\n          <label class="checkbox">\n            <input type="checkbox" id="checkbox-${a}" ${y?"checked":""} />\n          </label>\n          <button class="delete-button" id="delete-${a}">\n            <span class="icon">\n              <i class="fas fa-trash-can"></i>\n            </span>\n          </button>\n          <figure class="image is-96x96">\n            <img\n              id="image-${a}"\n              src="${p}"\n              alt="product-image"\n            />\n          </figure>\n          <div class="content">\n            <p id="title-${a}">${g=i,g.length>10?g.substring(0,9)+"..":g}</p>\n            <div class="quantity">\n              <button \n                class="button is-rounded" \n                id="minus-${a}" \n                ${s<=1?"disabled":""}\n                ${y?"":"disabled"}\n              >\n                <span class="icon is-small">\n                  <i class="fas fa-thin fa-minus"></i>\n                </span>\n              </button>\n              <input\n                class="input"\n                id="quantityInput-${a}"\n                type="number"\n                min="1"\n                max="99"\n                value="${s}"\n                ${y?"":"disabled"}\n              />\n              <button \n                class="button is-rounded" \n                id="plus-${a}"\n                ${s>=99?"disabled":""}\n                ${y?"":"disabled"}\n              >\n                <span class="icon">\n                  <i class="fas fa-lg fa-plus"></i>\n                </span>\n              </button>\n            </div>\n          </div>\n          <div class="calculation">\n            <p id="unitPrice-${a}">${n(m)}원</p>\n            <p>\n              <span class="icon">\n                <i class="fas fa-thin fa-xmark"></i>\n              </span>\n            </p>\n            <p id="quantity-${a}">${s}</p>\n            <p>\n              <span class="icon">\n                <i class="fas fa-thin fa-equals"></i>\n              </span>\n            </p>\n            <p id="total-${a}">${n(s*m)}원</p>\n          </div>\n        </div>\n      `),document.querySelector(`#delete-${a}`).addEventListener("click",(()=>S(a))),document.querySelector(`#checkbox-${a}`).addEventListener("change",(()=>async function(e){const t=document.querySelector(`#checkbox-${e}`);t.checked?(await v(e,"add-checkbox"),h(e,"able")):(await v(e,"removeTemp-checkbox"),h(e,"disable"))}(a))),document.querySelector(`#image-${a}`).addEventListener("click",c(`/product/detail?id=${a}`)),document.querySelector(`#title-${a}`).addEventListener("click",c(`/product/detail?id=${a}`)),document.querySelector(`#plus-${a}`).addEventListener("click",(()=>async function(e){await v(e,"add-plusButton"),await w(e,"increase"),await d("cart",e,(e=>{e.quantity=e.quantity+1})),h(e,"plus")}(a))),document.querySelector(`#minus-${a}`).addEventListener("click",(()=>async function(e){await v(e,"minusButton"),await w(e,"decrease"),await d("cart",e,(e=>{e.quantity=e.quantity-1})),h(e,"minus")}(a))),document.querySelector(`#quantityInput-${a}`).addEventListener("change",(()=>async function(e){const t=document.querySelector(`#quantityInput-${e}`),n=parseInt(t.value);if(n<1||n>99)return alert("수량은 1~99 사이가 가능합니다.");await v(e,"add-input"),await w(e,"input"),await d("cart",e,(e=>{e.quantity=n})),h(e,"input")}(a)))}))}(),async function(){const{productsCount:e,productsTotal:t}=await s("order","summary"),c=0!==e;p.innerText=`${e}개`,y.innerText=`${n(t)}원`,c?(g.innerText="3,000원",b.innerText=`${n(t+3e3)}원`):(g.innerText="0원",b.innerText="0원")}(),x(),l.addEventListener("change",f),m.addEventListener("click",q),$.addEventListener("click",c("/order"))})();