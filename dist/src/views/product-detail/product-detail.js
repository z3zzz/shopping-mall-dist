(()=>{"use strict";const e="kwang-shopping";AWS.config.update({region:"ap-northeast-2",credentials:new AWS.CognitoIdentityCredentials({IdentityPoolId:"ap-northeast-2:b6a1fa02-993d-437d-9ed5-7134db218241"})});const o=new AWS.S3({apiVersion:"2006-03-01",params:{Bucket:e}});const t=()=>{const e=window.location.search,o=new URLSearchParams(e),t={};for(const[e,n]of o)t[e]=n;return t},n=e=>{const o=e.split(" "),t=document.querySelector("#navbar"),n=!!localStorage.getItem("token"),r=!!localStorage.getItem("admin"),c={register:'<li><a href="/register">회원가입</a></li>',login:'<li><a href="/login">로그인</a></li>'},a={account:'<li><a href="/account">계정관리</a></li>',logout:'<li><a href="#" id="logout">로그아웃</a></li>',productAdd:'<li><a href="/product/add">제품 추가</a></li>',categoryAdd:'<li><a href="/category/add">카테고리 추가</a></li>'},s={admin:'<li><a href="/admin">페이지관리</a></li>'},i=document.createElement("script");i.innerText="\n      const logoutElem = document.querySelector('#logout'); \n      \n      if (logoutElem) {\n        logoutElem.addEventListener('click', () => {\n          localStorage.removeItem('token');\n          localStorage.removeItem('admin');\n\n          window.location.href = '/';\n        });\n      }\n  ";let d="";for(const e of o)r&&(d+=s[e]??""),d+=n?a[e]??"":c[e]??"";t.insertAdjacentHTML("afterbegin",d),t.after(i)};let r;const c=()=>{const e=new Promise(((e,o)=>{const t=indexedDB.open("shopping",1);t.onupgradeneeded=()=>{console.log("indexeddb의 업그레이드가 이루어집니다.");const e=t.result;e.createObjectStore("cart",{autoIncrement:!0}),e.createObjectStore("order",{autoIncrement:!0})},t.onsuccess=async()=>{console.log("indexeddb가 정상적으로 시작되었습니다."),e(t.result)},t.onerror=()=>{const e=t.error;console.log(`indexeddb를 시작하는 과정에서 오류가 발생하였습니다: ${e}`),o(e)}}));return e},a=document.querySelector("#productImageTag"),s=document.querySelector("#manufacturerTag"),i=document.querySelector("#titleTag"),d=document.querySelector("#detailDescriptionTag"),l=document.querySelector("#addToCartButton"),u=document.querySelector("#purchaseButton");async function g(e){const{_id:o,price:t}=e;await(async(e,o,t="")=>{r||(r=await c());const n=r.transaction([e],"readwrite").objectStore(e);return new Promise(((r,c)=>{const a=t?n.add(o,t):n.add(o);a.onsuccess=()=>{console.log(`${e}에 정상적으로 추가되었습니다.`),r()},a.onerror=()=>{const o=a.error;console.log(`${e}에 추가하는데 오류가 발생하였습니다: ${o}`),c(o)}}))})("cart",{...e,quantity:1},o),await(async(e,o,t)=>{r||(r=await c());const n=r.transaction([e],"readwrite").objectStore(e);return new Promise(((r,c)=>{const a=n.get(o);a.onsuccess=()=>{const s=a.result||{};t(s);const i=n.put(s,o);i.onsuccess=()=>{console.log(`${e}가 정상적으로 수정되었습니다.`),r()},i.onerror=()=>{const o=i.error;console.log(`${e}를 수정하는데 에러가 발생하였습니다: ${o} `),c(o)}}}))})("order","summary",(e=>{const n=e.productsCount,r=e.productsTotal,c=e.ids,a=e.selectedIds;e.productsCount=n?n+1:1,e.productsTotal=r?r+t:t,e.ids=c?[...c,o]:[o],e.selectedIds=a?[...a,o]:[o]}))}(e=>{const{[e]:o}=t();o||window.location.replace("/page-not-found")})("id"),(()=>{switch(window.location.pathname){case"/":case"/cart/":case"/product/detail/":case"/product/list/":n("admin register login account logout");break;case"/account/orders/":case"/account/security/":case"/account/signout/":case"/admin/orders/":case"/admin/users/":case"/order/complete/":case"/order/":case"/product/add/":n("admin account logout");break;case"/account/":n("admin logout");break;case"/admin/":n("account logout");break;case"/category/add/":n("admin account productAdd logout");break;case"/login/":n("register");break;case"/register/":n("login")}})(),async function(){const{id:n}=t(),r=await async function(e,o=""){const t=`${e}/${o}`;console.log(`%cGET 요청: ${t} `,"color: #a25cd1;");const n=await fetch(t,{headers:{Authorization:`Bearer ${localStorage.getItem("token")}`}});if(!n.ok){const e=await n.json(),{reason:o}=e;throw new Error(o)}return await n.json()}(`/api/products/${n}`),{title:c,detailDescription:m,manufacturer:p,imageKey:w,isRecommended:f,price:y}=r,h=await function(t){return new Promise((n=>{const r={Bucket:e,Key:t,Expires:60};o.getSignedUrl("getObject",r,((e,o)=>{n(o)}))}))}(w);var S;a.src=h,i.innerText=c,d.innerText=m,s.innerText=p,priceTag.innerText=`${S=y,S.toString().replace(/\B(?=(\d{3})+(?!\d))/g,",")}원`,f&&i.insertAdjacentHTML("beforeend",'<span class="tag is-success is-rounded">추천</span>'),l.addEventListener("click",(async()=>{try{await g(r),alert("장바구니에 추가되었습니다.")}catch(e){e.message.includes("Key")&&alert("이미 장바구니에 추가되어 있습니다."),console.log(e)}})),u.addEventListener("click",(async()=>{try{await g(r),window.location.href="/order"}catch(e){console.log(e),window.location.href="/order"}}))}()})();